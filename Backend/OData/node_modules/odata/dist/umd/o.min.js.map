{"version":3,"file":"o.min.js","sources":["../../src/o.ts","../../src/ORequest.ts","../../src/OBatch.ts","../../src/OHandler.ts"],"sourcesContent":["import { OdataConfig } from \"./OdataConfig\";\nimport { OHandler } from \"./OHandler\";\n\n/**\n * Use the 'o'-function to initialize a request directly or use the returned\n * handler to store the settings.\n *\n * Use o() directly jquery like:\n * @example\n * ```typescript\n *  await o('https://rootUrl').get('resource').query();\n * ```\n *\n * Or with a handler:\n * @example\n * ```typescript\n *  const oHandler = o('https://rootUrl');\n *  await oHandler.get('resource').query({ $top: 2 });\n * ```\n *\n * @param rootUrl The url to query\n * @param config The odata and fetch configuration.\n */\nexport function o(rootUrl: string | URL, config: OdataConfig | any = {}) {\n  // polyfill fetch if we have no fetch\n  const env = typeof window !== \"undefined\" ? window : global;\n  if (!(\"fetch\" in env) && !config.disablePolyfill) {\n    require(\"cross-fetch/polyfill\");\n  }\n  if (!(\"URL\" in env) && !config.disablePolyfill) {\n    require(\"universal-url\").shim();\n  }\n\n  // set the default configuration values\n  const defaultConfigValues = {\n    batch: {\n      changsetBoundaryPrefix: \"changset_\",\n      endpoint: \"$batch\",\n      headers: new Headers({\n        \"Content-Type\": \"multipart/mixed\"\n      }),\n      useChangset: false\n    },\n    boundaryPrefix: \"batch_\",\n    credentials: \"omit\",\n    fragment: \"value\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    mode: \"cors\",\n    redirect: \"follow\",\n    referrer: \"client\",\n    onStart: () => null,\n    onError: () => null,\n    onFinish: () => null\n  };\n\n  const mergedConfig = { ...defaultConfigValues, ...config };\n  if (typeof rootUrl === \"string\") {\n    try {\n      // we assuming a resource\n      const configUrl = mergedConfig.rootUrl || window.location.href;\n      rootUrl = new URL(\n        rootUrl,\n        configUrl.endsWith(\"/\") ? configUrl : `${configUrl}/`\n      );\n    } catch (ex) {\n      // no window?!\n      rootUrl = new URL(rootUrl as string, mergedConfig.rootUrl);\n    }\n  }\n  mergedConfig.rootUrl = rootUrl;\n  return new OHandler(mergedConfig);\n}\n\n/**\n * Default exports\n */\nexport * from \"./OBatch\";\nexport * from \"./OdataConfig\";\nexport * from \"./OdataQuery\";\nexport * from \"./OHandler\";\nexport * from \"./ORequest\";\n","import { OdataQuery } from \"./OdataQuery\";\n\nexport class ORequest {\n  public url: URL;\n\n  constructor(url: URL | string, public config: RequestInit) {\n    if (typeof url === \"string\") {\n      this.url = new URL(url);\n    } else {\n      this.url = url as URL;\n    }\n  }\n\n  public get fetch() {\n    const req = new Request(this.url.href, this.config);\n    return fetch(req, this.config);\n  }\n\n  public applyQuery(query?: OdataQuery) {\n    for (const key in query) {\n      if (query.hasOwnProperty(key)) {\n        if (this.url.searchParams.get(key)) {\n          this.url.searchParams.set(key, query[key]);\n        } else {\n          this.url.searchParams.append(key, query[key]);\n        }\n      }\n    }\n  }\n}\n","import { OdataConfig } from \"./OdataConfig\";\nimport { OdataQuery } from \"./OdataQuery\";\nimport { ORequest } from \"./ORequest\";\n\nexport class OBatch {\n  private batchBody: string;\n  private batchUid;\n  private batchConfig: OdataConfig;\n\n  constructor(\n    resources: ORequest[],\n    config: OdataConfig,\n    query?: OdataQuery,\n    private changeset: boolean = false,\n  ) {\n    this.batchConfig = { ...config, ...config.batch };\n    this.batchUid = this.getUid();\n    (this.batchConfig.headers as Headers).set(\n      \"Content-Type\",\n      `multipart/mixed; boundary=${this.batchUid}`,\n    );\n\n    if (this.batchConfig.batch.useChangset) {\n      resources = this.checkForChangset(resources, query);\n    } else {\n      this.batchBody += `--${this.batchUid}`;\n    }\n\n    resources.forEach(\n      (req) => req.config.method === \"GET\" && req.applyQuery(query),\n    );\n    let contentId = 0;\n    this.batchBody += resources.map((req) => {\n      contentId++;\n      return `\nContent-Type: application/http\nContent-Transfer-Encoding: binary\nContent-ID: ${contentId}\n\n${req.config.method} ${req.url.href} HTTP/1.1\n${this.getHeaders(req)}\n${this.getBody(req)}`;\n    }).join(`\n--${this.batchUid}`);\n\n    this.batchBody += `\n--${this.batchUid}--\n `;\n  }\n\n  public async fetch(url: URL) {\n    const req = new ORequest(url, {\n      ...this.batchConfig,\n      body: this.batchBody,\n      method: \"POST\",\n    });\n    const res: Response = await req.fetch;\n    if (res.status === 200) {\n      const data = await res.text();\n      return this.parseResponse(data, res.headers.get(\"Content-Type\"));\n    } else {\n      // check if return is JSON\n      try {\n        const error = await res.json();\n        throw { res, error };\n      } catch (ex) {\n        throw res;\n      }\n    }\n  }\n\n  public parseResponse(responseData: string, contentTypeHeader: string): any {\n    const headers = contentTypeHeader.split(\"boundary=\");\n    const boundary = headers[headers.length - 1];\n    const splitData = responseData.split(`--${boundary}`);\n    splitData.shift();\n    splitData.pop();\n    const parsedData = splitData.map((data) => {\n      const dataSegments = data.trim().split(\"\\r\\n\\r\\n\");\n      if (dataSegments.length === 0 || dataSegments.length > 3) {\n        // we are unable to parse -> return all\n        return data;\n      } else if (dataSegments.length === 3) {\n        // if length >= 3 we have a body, try to parse if JSON and return that!\n        try {\n          const parsed = JSON.parse(dataSegments[2]);\n          const hasFragment = parsed[this.batchConfig.fragment];\n          return hasFragment || parsed;\n        } catch (ex) {\n          return dataSegments[2];\n        }\n      } else {\n        // it seems like we have no body, return the status code\n        return +dataSegments[1].split(\" \")[1];\n      }\n    });\n    return parsedData;\n  }\n\n  /**\n   * If we determine a changset (POST, PUT, PATCH) we initalize a new\n   * OBatch instance for it.\n   */\n  private checkForChangset(resources: ORequest[], query: OdataQuery) {\n    const changeRes = this.getChangeResources(resources);\n\n    if (this.changeset) {\n      this.batchBody += `\nContent-Type: multipart/mixed; boundary=${this.batchUid}\n\n--${this.batchUid}`;\n    } else if (changeRes.length > 0) {\n      this.batchBody = `--${this.batchUid}`;\n      this.batchBody += new OBatch(\n        changeRes,\n        this.batchConfig,\n        query,\n        true,\n      ).batchBody;\n      resources = this.getGETResources(resources);\n    } else {\n      this.batchBody = `--${this.batchUid}`;\n    }\n    return resources;\n  }\n\n  private getGETResources(resources: ORequest[]): ORequest[] {\n    return resources.filter((req) => req.config.method === \"GET\");\n  }\n\n  private getChangeResources(resources: ORequest[]): ORequest[] {\n    return resources.filter((req) => req.config.method !== \"GET\");\n  }\n\n  private getBody(req: ORequest) {\n    if (req.config.body) {\n      return `\n      ${req.config.body}\n\n      `;\n    }\n    return \"\";\n  }\n\n  private getUid() {\n    let d = new Date().getTime();\n    const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === \"x\" ? r : (r & 0x7) | 0x8).toString(16);\n    });\n    return `${\n      this.changeset\n        ? this.batchConfig.batch.changsetBoundaryPrefix\n        : this.batchConfig.batch.boundaryPrefix\n    }${uuid}`;\n  }\n\n  private getHeaders(req: ORequest) {\n    return Object.keys(req.config.headers)\n      .map((name) => `${name}:${req.config.headers[name]}`)\n      .join(\"\\n\");\n  }\n}\n","import { OBatch } from \"./OBatch\";\nimport { OdataConfig } from \"./OdataConfig\";\nimport { OdataQuery } from \"./OdataQuery\";\nimport { ORequest } from \"./ORequest\";\n\ntype BodyType = Blob | BufferSource | FormData | URLSearchParams | string | object;\n\nexport class OHandler {\n  private requests: ORequest[] = [];\n\n  constructor(public config: OdataConfig) {}\n\n  /**\n   * Does a fetch request to the given endpoint and request\n   * all resources in sequent. Tries to parse the result logical\n   * so that no further processing is used. If the result is only one\n   * entity a object is returned, otherwise a array of objects.\n   *\n   * @example\n   * ```typescript\n   *  const russell = await o('https://services.odata.org/TripPinRESTierService/')\n   *  .get('People('russellwhyte')\n   *  .query();\n   *\n   *  console.log(russell); // shows: { FirstName: \"Russell\", LastName: \"Whyte\" [...] }\n   * ```\n   *\n   * If the request fails with an error code higher then 400 it throws the\n   * Response:\n   *\n   * @example\n   * ```typescript\n   *  try {\n   *    const unknown = await o('https://services.odata.org/TripPinRESTierService/')\n   *      .get('People('unknown')\n   *      .query();\n   *  } catch(res) { // Response\n   *    console.log(res.status); // 404\n   *  }\n   * ```\n   *\n   * @param query The URLSearchParams that are added to the question mark on the url.\n   *              That are usually the odata queries like $filter, $top, etc...\n   * @returns Either an array or a object with the given entities. If multiple\n   *          resources are fetched, this method returns a array of array/object. If there\n   *          is no content (e.g. for delete) this method returns the Response\n   */\n  public async query(query?: OdataQuery) {\n    try {\n      this.config.onStart(this);\n      const response: Response[] = await this.getFetch(query);\n      const json = await Promise.all(\n        response.map(\n          async (res) => {\n            if (res.status >= 400) {\n              this.config.onError(this, res);\n              throw res;\n            } else if (res.ok && res.json) {\n              try {\n                this.config.onFinish(this, res);\n                const data = await res.json();\n                return data[this.config.fragment] || data;\n              } catch (ex) {\n                return res;\n              }\n            } else {\n              return await res.text();\n            }\n          },\n        ),\n      );\n      return json.length > 1 ? json : json[0];\n    } catch (ex) {\n      throw ex;\n    } finally {\n      this.requests = [];\n    }\n  }\n\n  /**\n   * Request all requests in sequent. Does simply return a Response or Response[]\n   * without any data parsing applied.\n   *\n   * @param query The URLSearchParams that are added to the question mark on the url.\n   *              That are usually the odata queries like $filter, $top, etc...\n   */\n  public async fetch(query?: OdataQuery) {\n    try {\n      this.config.onStart(this);\n      const fetch = await this.getFetch(query);\n      return fetch.length === 1 ? fetch[0] : fetch;\n    } catch (ex) {\n      this.config.onError(this, ex);\n      throw ex;\n    } finally {\n      this.config.onFinish(this);\n      this.requests = [];\n    }\n  }\n\n  /**\n   * Does a batch http-batch request. All request in that sequent are send via one\n   * physically request and afterwards parsed to separate data chunks.\n   *\n   * @param query The URLSearchParams that are added to the question mark on the url.\n   *              That are usually the odata queries like $filter, $top, etc...\n   */\n  public async batch(query?: OdataQuery) {\n    try {\n      const batch = new OBatch(this.requests, this.config, query);\n      const url = this.getUrl(this.config.batch.endpoint);\n      const data = await batch.fetch(url);\n      return data;\n    } catch (ex) {\n      throw ex;\n    } finally {\n      this.requests = [];\n    }\n  }\n\n  /**\n   * Gets the data from the endpoint + resource url.\n   *\n   * @param resource The resource to request e.g. People/$value.\n   */\n  public get(resource: string = \"\") {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, { ...this.config, method: \"GET\" });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Post data to an endpoint + resource.\n   *\n   * @param resource The resource to post to.\n   * @param body The data to post.\n   */\n  public post(resource: string = \"\", body: BodyType) {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, { ...this.config, method: \"POST\", body: this.getBody(body) });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Put data to an endpoint + resource.\n   *\n   * @param resource The resource to put to.\n   * @param body The data to put.\n   */\n  public put(resource: string = \"\", body: BodyType) {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, { ...this.config, method: \"PUT\", body: this.getBody(body) });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Patch data to an endpoint + resource.\n   *\n   * @param resource The resource to patch to.\n   * @param body The data to patch.\n   */\n  public patch(resource: string = \"\", body: BodyType) {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, {\n      ...this.config,\n      body: this.getBody(body),\n      method: \"PATCH\",\n    });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Deletes a resource from the endpoint.\n   *\n   * @param resource The resource to delete e.g. People/1\n   */\n  public delete(resource = \"\") {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, { ...this.config, method: \"DELETE\" });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Use that method to add any kind of request (e.g. a head request) to\n   * the execution list.\n   *\n   * @example\n   * ```typescript\n   *   const req = new ORequest('http://full.url/healt', { method: 'HEAD'});\n   *   const res = await o('http://another.url').request(req).fetch();\n   *   console.log(res.status); // e.g. 200 from http://full.url/healt\n   * ```\n   * @param req The request to add.\n   */\n  public request(req: ORequest) {\n    this.requests.push(req);\n  }\n\n  /**\n   * Determines how many request are outstanding.\n   */\n  public get pending() {\n    return this.requests.length;\n  }\n\n  /**\n   * Returns a URL based on the rootURL + the given resource\n   * @param resource The resource to join.\n   */\n  public getUrl(resource: string) {\n    return new URL(resource, this.config.rootUrl);\n  }\n\n  private async getFetch(query: OdataQuery) {\n    if (this.pending > 1) {\n      const result: Response[] = [];\n      for (const req of this.requests) {\n        req.applyQuery({ ...this.config.query, ...query });\n        const request = await req.fetch;\n        result.push(request);\n      }\n      return result;\n    } else {\n      this.requests[0].applyQuery({ ...this.config.query, ...query });\n      return [await this.requests[0].fetch];\n    }\n  }\n\n  private getBody(body: BodyType): any {\n    if (typeof body === \"object\") {\n      return JSON.stringify(body);\n    }\n    return body;\n  }\n}\n"],"names":["o","rootUrl","config","env","window","global","disablePolyfill","require","shim","defaultConfigValues","batch","changsetBoundaryPrefix","endpoint","headers","Headers","Content-Type","useChangset","boundaryPrefix","credentials","fragment","mode","redirect","referrer","onStart","onError","onFinish","mergedConfig","configUrl","location","href","URL","endsWith","ex","OHandler","url","this","Object","ORequest","req","Request","fetch","query","key","hasOwnProperty","searchParams","get","set","append","resources","changeset","batchConfig","batchUid","getUid","checkForChangset","batchBody","forEach","method","applyQuery","contentId","map","_this","getHeaders","getBody","join","OBatch","body","res","_a","status","text","data","parseResponse","json","error","responseData","contentTypeHeader","split","boundary","length","splitData","shift","pop","dataSegments","trim","parsed","JSON","parse","changeRes","getChangeResources","getGETResources","filter","d","Date","getTime","uuid","replace","c","r","Math","random","floor","toString","keys","name","getFetch","response","Promise","all","ok","requests","fetch_1","ex_3","getUrl","resource","request","push","pending","result","_i","_b","stringify"],"mappings":"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"}